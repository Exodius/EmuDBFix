diff --git a/src/server/scripts/Northrend/AzjolNerub/AzjolNerub/boss_anubarak.cpp b/src/server/scripts/Northrend/AzjolNerub/AzjolNerub/boss_anubarak.cpp
index 4e75141..99713a1 100644
--- a/src/server/scripts/Northrend/AzjolNerub/AzjolNerub/boss_anubarak.cpp
+++ b/src/server/scripts/Northrend/AzjolNerub/AzjolNerub/boss_anubarak.cpp
@@ -99,18 +99,14 @@ public:
         InstanceScript *pInstance;
 
         bool bChanneling;
-        bool bGuardianSummoned;
-        bool bVenomancerSummoned;
-        bool bDatterSummoned;
         uint8 uiPhase;
+        uint8 uiCountWave;
         uint32 uiUndergroundPhase;
         uint32 uiCarrionBeetlesTimer;
         uint32 uiLeechingSwarmTimer;
         uint32 uiPoundTimer;
         uint32 uiSubmergeTimer;
-        uint32 uiUndergroundTimer;
-        uint32 uiVenomancerTimer;
-        uint32 uiDatterTimer;
+        uint32 uiSummonOrChangePhase;
 
         uint32 uiImpaleTimer;
         uint32 uiImpalePhase;
@@ -124,6 +120,8 @@ public:
             uiLeechingSwarmTimer = 20*IN_MILLISECONDS;
             uiImpaleTimer = 9*IN_MILLISECONDS;
             uiPoundTimer = 15*IN_MILLISECONDS;
+            uiSummonOrChangePhase = 3 * IN_MILLISECONDS;
+            uiCountWave = 0;
 
             uiPhase = PHASE_MELEE;
             uiUndergroundPhase = 0;
@@ -181,105 +179,73 @@ public:
                 {
                     switch(uiImpalePhase)
                     {
-                    case IMPALE_PHASE_TARGET:
-                        if (Unit *target = SelectTarget(SELECT_TARGET_RANDOM, 0, 100, true))
-                        {
-                            if (Creature *pImpaleTarget = DoSummonImpaleTarget(target))
-                                pImpaleTarget->CastSpell(pImpaleTarget, SPELL_IMPALE_SHAKEGROUND, true);
-                            uiImpaleTimer = 3*IN_MILLISECONDS;
-                            uiImpalePhase = IMPALE_PHASE_ATTACK;
-                        }
-                        break;
-                    case IMPALE_PHASE_ATTACK:
-                        if (Creature* pImpaleTarget = Unit::GetCreature(*me, uiImpaleTarget))
-                        {
-                            pImpaleTarget->CastSpell(pImpaleTarget, SPELL_IMPALE_SPIKE, false);
-                            pImpaleTarget->RemoveAurasDueToSpell(SPELL_IMPALE_SHAKEGROUND);
-                        }
-                        uiImpalePhase = IMPALE_PHASE_DMG;
-                        uiImpaleTimer = 1*IN_MILLISECONDS;
-                        break;
-                    case IMPALE_PHASE_DMG:
-                        if (Creature* pImpaleTarget = Unit::GetCreature(*me, uiImpaleTarget))
-                            me->CastSpell(pImpaleTarget, DUNGEON_MODE(SPELL_IMPALE_DMG, SPELL_IMPALE_DMG_H), true);
-                        uiImpalePhase = IMPALE_PHASE_TARGET;
-                        uiImpaleTimer = 9*IN_MILLISECONDS;
-                        break;
+                        case IMPALE_PHASE_TARGET:
+                            if (Unit *target = SelectTarget(SELECT_TARGET_RANDOM, 0, 100, true))
+                            {
+                                if (Creature *pImpaleTarget = DoSummonImpaleTarget(target))
+                                    pImpaleTarget->CastSpell(pImpaleTarget, SPELL_IMPALE_SHAKEGROUND, true);
+                                uiImpaleTimer = 3*IN_MILLISECONDS;
+                                uiImpalePhase = IMPALE_PHASE_ATTACK;
+                            }
+                            break;
+                        case IMPALE_PHASE_ATTACK:
+                            if (Creature* pImpaleTarget = Unit::GetCreature(*me, uiImpaleTarget))
+                            {
+                                pImpaleTarget->CastSpell(pImpaleTarget, SPELL_IMPALE_SPIKE, false);
+                                pImpaleTarget->RemoveAurasDueToSpell(SPELL_IMPALE_SHAKEGROUND);
+                            }
+                            uiImpalePhase = IMPALE_PHASE_DMG;
+                            uiImpaleTimer = 1*IN_MILLISECONDS;
+                            break;
+                        case IMPALE_PHASE_DMG:
+                            if (Creature* pImpaleTarget = Unit::GetCreature(*me, uiImpaleTarget))
+                                me->CastSpell(pImpaleTarget, DUNGEON_MODE(SPELL_IMPALE_DMG, SPELL_IMPALE_DMG_H), true);
+                            uiImpalePhase = IMPALE_PHASE_TARGET;
+                            uiImpaleTimer = 9*IN_MILLISECONDS;
+                            break;
                     }
-                } else uiImpaleTimer -= diff;
+                } else
+                    uiImpaleTimer -= diff;
 
-                if (!bGuardianSummoned)
+                if (uiSummonOrChangePhase >= diff)
                 {
-                    for (uint8 i = 0; i < 2; ++i)
-                    {
-                        if (Creature *Guardian = me->SummonCreature(CREATURE_GUARDIAN, SpawnPointGuardian[i], TEMPSUMMON_CORPSE_DESPAWN, 0))
-                        {
-                            Guardian->AddThreat(me->getVictim(), 0.0f);
-                            DoZoneInCombat(Guardian);
-                        }
-                    }
-                    bGuardianSummoned = true;
+                    uiSummonOrChangePhase -= diff;
+                    break;
                 }
 
-                if (!bVenomancerSummoned)
+                uiSummonOrChangePhase = 4*IN_MILLISECONDS;
+
+                if (urand(0,10) == 1)
                 {
-                    if (uiVenomancerTimer <= diff)
-                    {
-                        if (uiUndergroundPhase > 1)
-                        {
-                            for (uint8 i = 0; i < 2; ++i)
-                            {
-                                if (Creature *Venomancer = me->SummonCreature(CREATURE_VENOMANCER, SpawnPoint[i], TEMPSUMMON_CORPSE_DESPAWN, 0))
-                                {
-                                    Venomancer->AddThreat(me->getVictim(), 0.0f);
-                                    DoZoneInCombat(Venomancer);
-                                }
-                            }
-                            bVenomancerSummoned = true;
-                        }
-                    } else uiVenomancerTimer -= diff;
+                    me->SummonCreature(CREATURE_DATTER, SpawnPoint[0], TEMPSUMMON_CORPSE_DESPAWN, 0);
+                    me->SummonCreature(CREATURE_DATTER, SpawnPoint[1], TEMPSUMMON_CORPSE_DESPAWN, 0);
                 }
 
-                if (!bDatterSummoned)
+                if (!lSummons.empty())
+                    break;
+
+                if (uiCountWave > 0)
                 {
-                    if (uiDatterTimer <= diff)
-                    {
-                        if (uiUndergroundPhase > 2)
-                        {
-                            for (uint8 i = 0; i < 2; ++i)
-                            {
-                                if (Creature *Datter = me->SummonCreature(CREATURE_DATTER, SpawnPoint[i], TEMPSUMMON_CORPSE_DESPAWN, 0))
-                                {
-                                    Datter->AddThreat(me->getVictim(), 0.0f);
-                                    DoZoneInCombat(Datter);
-                                }
-                            }
-                            bDatterSummoned = true;
-                        }
-                    } else uiDatterTimer -= diff;
+                    --uiCountWave;
+                    me->SummonCreature((urand(0,1)) ? CREATURE_GUARDIAN : CREATURE_VENOMANCER, SpawnPointGuardian[0], TEMPSUMMON_CORPSE_DESPAWN, 0);
+                    me->SummonCreature((urand(0,1)) ? CREATURE_GUARDIAN : CREATURE_VENOMANCER, SpawnPointGuardian[1], TEMPSUMMON_CORPSE_DESPAWN, 0);
+                    break;
                 }
 
-                if (uiUndergroundTimer <= diff)
-                {
-                    me->RemoveAura(SPELL_SUBMERGE);
-                    me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE|UNIT_FLAG_NOT_SELECTABLE);
-                    uiPhase = PHASE_MELEE;
-                } else uiUndergroundTimer -= diff;
-                break;
+                if (uiImpalePhase != IMPALE_PHASE_TARGET)
+                    break;
 
+                me->RemoveAura(SPELL_SUBMERGE);
+                me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE|UNIT_FLAG_NOT_SELECTABLE);
+                uiPhase = PHASE_MELEE;
+                break;
             case PHASE_MELEE:
                 if (((uiUndergroundPhase == 0 && HealthBelowPct(75))
                     || (uiUndergroundPhase == 1 && HealthBelowPct(50))
                     || (uiUndergroundPhase == 2 && HealthBelowPct(25)))
                     && !me->HasUnitState(UNIT_STAT_CASTING))
                 {
-                    bGuardianSummoned = false;
-                    bVenomancerSummoned = false;
-                    bDatterSummoned = false;
-
-                    uiUndergroundTimer = 40*IN_MILLISECONDS;
-                    uiVenomancerTimer = 25*IN_MILLISECONDS;
-                    uiDatterTimer = 32*IN_MILLISECONDS;
+                    uiSummonOrChangePhase = 3*IN_MILLISECONDS;
 
                     uiImpalePhase = 0;
                     uiImpaleTimer = 9*IN_MILLISECONDS;
@@ -288,13 +254,15 @@ public:
                     me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE|UNIT_FLAG_NOT_SELECTABLE);
 
                     uiPhase = PHASE_UNDERGROUND;
+
                     ++uiUndergroundPhase;
+                    uiCountWave = uiUndergroundPhase;
                 }
 
                 if (bChanneling == true)
                 {
                     for (uint8 i = 0; i < 8; ++i)
-                    DoCast(me->getVictim(), SPELL_SUMMON_CARRION_BEETLES, true);
+                        DoCast(me->getVictim(), SPELL_SUMMON_CARRION_BEETLES, true);
                     bChanneling = false;
                 }
                 else if (uiCarrionBeetlesTimer <= diff)
@@ -302,23 +270,24 @@ public:
                     bChanneling = true;
                     DoCastVictim(SPELL_CARRION_BEETLES);
                     uiCarrionBeetlesTimer = 25*IN_MILLISECONDS;
-                } else uiCarrionBeetlesTimer -= diff;
+                } else
+                    uiCarrionBeetlesTimer -= diff;
 
                 if (uiLeechingSwarmTimer <= diff)
                 {
                     DoCast(me, SPELL_LEECHING_SWARM, true);
                     uiLeechingSwarmTimer = 19*IN_MILLISECONDS;
-                } else uiLeechingSwarmTimer -= diff;
+                } else
+                    uiLeechingSwarmTimer -= diff;
 
                 if (uiPoundTimer <= diff)
                 {
                     if (Unit *target = me->getVictim())
-                    {
                         if (Creature *pImpaleTarget = DoSummonImpaleTarget(target))
                             me->CastSpell(pImpaleTarget, DUNGEON_MODE(SPELL_POUND, SPELL_POUND_H), false);
-                    }
                     uiPoundTimer = 16500;
-                } else uiPoundTimer -= diff;
+                } else
+                    uiPoundTimer -= diff;
 
                 DoMeleeAttackIfReady();
                 break;
@@ -342,8 +311,19 @@ public:
 
         void JustSummoned(Creature* summon)
         {
+            if(summon->GetOriginalEntry() != CREATURE_GUARDIAN && summon->GetOriginalEntry() != CREATURE_VENOMANCER)
+                return;
+
+            summon->AddThreat(me->getVictim(), 0.0f);
+            DoZoneInCombat(summon);
+
             lSummons.Summon(summon);
         }
+
+        void SummonedCreatureDespawn(Creature* summon)
+        {
+            lSummons.Despawn(summon);
+        }
     };
 
     CreatureAI *GetAI(Creature *creature) const
